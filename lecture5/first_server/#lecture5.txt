[Node.js 애플리케이션과 모듈]

- 코드가 커지면 객체만으로는 부족
- 많은 자바스크립트 파일로 구성
- 모듈은 코드를 정리하는 가장 큰 도구
- 체계적이고 효율적인 관리를 위해 모듈을 활용
  - 모듈: 코드 라이브러리가 들어있는 각 자바스크립트 파일 또는 폴더
  - 모듈의 활용: 
    - module.exports(객체 측)를 통해 외부(모듈 측)에서도 참조가 가능하도록 설정
    - require()(사용 측)를 통해 모듈 불러오기

    
[npm 활용]

- Node.js의 패키지 관리자
  - 패키지: 여러 개의 모듈 포함 가능
- 패키지들의 설치, 제거, 수정에 활용
  - npm install <package>
  - npm uninstall <package>
    - --save(-S): 애플리케이션에 종속 모듈로 설치-> 일반적 사용시
    - --global(-g):: 컴퓨터 상의 전역 패키지로 설치




1. Node.js에서 웹 서버 만들기

[Node.js 애플리케이션의 초기화]

- package.json 파일
  - 프로젝트 관련 정보 저장
    - 현재 릴리즈 버전
    - 애플리케이션 이름
    - 메인 애플리케이션 파일
    - 의존 패키지 정보 등
  - 프로젝트의 루트 레벨에 존재하는 파일


- package.json 파일의 생성
  - npm init
  - ex) npm install cities --save 
    -> node_modules 디렉토리 생성됨
  * node_modules에 다른 패키지도 생성되는 이유
    : cities가 다른 패키지들의 기능을 참조하고 있기 때문에

  - main.js는 애플리케이션을 구동하는 시작점
  - package.json은 나의 특정 애플리케이션과 패키지 종속 관계에 대한 설정을 포함한다.
  - node_modules 폴더에는 다운로드된 모든 외부 패키지들이 들어있다.

- node_modules 디렉토리(실행에만 필요함)
  - 모든 외부 패키지가 들어있음
  - git으로 소스코드를 관리한다면, .gitignore 파일에 
    node_modules 디렉토리를 추가하여 git에서 제외
  - npm install 명령을 통해 언제든지 필요한 모듈 설치 가능

-------------------------------------------------------



- 웹 서버의 이해
  - 클라이언트(웹 브라우저)와 웹 서버
    - HTTP 프로토콜을 통해 서로 통신
      - GET: 서버로부터 정보를 요청
      - POST: 서버로 정보를 전송


  - 요청/응답 사이클
  1. 사용자는 브라우저에 URL을 입력한다.
  2. HTTP 요청이 URL 연관 서버에 전달된다.
  3. 사용자 요청에 응답할 내용을 정하기 위해 물리 서버에서 서버 로직이 실행된다.
  4. HTTP 응답이 HTML, json, 일반 텍스트 또는 다른 포맷으로 사용자에 전달된다.
  5. 사용자는 보통 HTML 페이지의 형태로 응답을 받고 이는 브라우저 창에 나타난다.


  - 웹서버 포트 번호
  HTTP: 80번 포트(default)
  HTTPS: 443번(default)
  개발용으로 많이 사용하는 번호: 3000, 8080 

- 콜백(callback) 
  - 익명 함수로 다른 함수가 종료될 때 자동으로 실행
  - 다른 코드를 실행하기 전에 원 함수의 실행 종료를 기다릴 필요 없음
  - 비동기 방식: 순서대로 도착X, 모름, 큐에 요청 쌓아놓고 시간을 쪼개서 진행